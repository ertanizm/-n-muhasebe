const express = require('express');
const mysql = require('mysql2/promise');
const crypto = require('crypto');
const session = require('express-session');
const app = express();
const path = require('path');
const rootRouter = require('./root');

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views')); // views klasörü

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/', rootRouter);

// Statik dosyalar için public klasörünü tanıt
app.use(express.static(path.join(__dirname, 'public')));
// dashboard.css dosyası direkt erişilebilir olsun
app.use(express.static(path.join(__dirname)));

const host = 'localhost';
const masterDbUser = 'root';
const masterDbPass = '';
const masterDbName = 'master_db';

// Session middleware ekle
app.use(session({
    secret: 'mutabik-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: false } // HTTPS kullanılmıyorsa false olmalı
}));

// Utility to create master_db and tables if not exist
async function ensureMasterDb() {
    const conn = await mysql.createConnection({ host, user: masterDbUser, password: masterDbPass });
    await conn.query(`CREATE DATABASE IF NOT EXISTS \`${masterDbName}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci`);
    await conn.query(`USE \`${masterDbName}\``);

    await conn.query(`
        CREATE TABLE IF NOT EXISTS companies (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            db_name VARCHAR(100) NOT NULL UNIQUE,
            start_date DATE,
            status ENUM('Aktif', 'Pasif') DEFAULT 'Aktif'
        )
    `);

    await conn.query(`
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            email VARCHAR(255) NOT NULL UNIQUE,
            password_hash VARCHAR(255) NOT NULL,
            company_id INT NOT NULL,
            role ENUM('Admin', 'Kullanici') DEFAULT 'Kullanici',
            FOREIGN KEY (company_id) REFERENCES companies(id)
                ON DELETE CASCADE
                ON UPDATE CASCADE
        )
    `);
    await conn.end();
}

// Endpoint to create company
app.post('/create-company', async (req, res) => {
    await ensureMasterDb();

    const firmaAdi = req.body.firma_adi || '';
    const email = req.body.email || '';
    const password = req.body.password || '';

    if (!firmaAdi || !email || !password) {
        return res.status(400).send('❗ Lütfen tüm alanları doldurun.');
    }

    const dbName = firmaAdi.toLowerCase().replace(/[^a-zA-Z0-9]/g, '_') + '_db';

    let masterConn;
    try {
        masterConn = await mysql.createConnection({
            host,
            user: masterDbUser,
            password: masterDbPass,
            database: masterDbName
        });

        // Check for duplicate db_name
        const [rows] = await masterConn.execute(
            'SELECT COUNT(*) as count FROM companies WHERE db_name = ?',
            [dbName]
        );
        if (rows[0].count > 0) {
            return res.status(400).send('❗ Bu firma adına ait veritabanı zaten mevcut. Lütfen farklı bir isim deneyin.');
        }

        // Create tenant database
        await masterConn.query(`CREATE DATABASE IF NOT EXISTS \`${dbName}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci`);

        // Transaction for company/user creation
        await masterConn.beginTransaction();

        const [companyResult] = await masterConn.execute(
            `INSERT INTO companies (name, db_name, start_date, status) VALUES (?, ?, CURDATE(), 'Aktif')`,
            [firmaAdi, dbName]
        );
        const companyId = companyResult.insertId;

        const passwordHash = crypto.createHash('sha256').update(password).digest('hex');

        await masterConn.execute(
            `INSERT INTO users (email, password_hash, company_id, role) VALUES (?, ?, ?, 'Admin')`,
            [email, passwordHash, companyId]
        );

        await masterConn.commit();

        // Connect to tenant DB and create tables
        const tenantConn = await mysql.createConnection({
            host,
            user: masterDbUser,
            password: masterDbPass,
            database: dbName
        });

        await tenantConn.query(`
            CREATE TABLE IF NOT EXISTS stoklar (
                id INT AUTO_INCREMENT PRIMARY KEY,
                stok_kodu VARCHAR(50),
                stok_adi VARCHAR(255),
                birim VARCHAR(10),
                miktar DECIMAL(10,2)
            )
        `);

        await tenantConn.query(`
            CREATE TABLE IF NOT EXISTS faturalar (
                id INT AUTO_INCREMENT PRIMARY KEY,
                fatura_no VARCHAR(50),
                tarih DATE,
                cari_unvan VARCHAR(255),
                tutar DECIMAL(12,2),
                kdv_orani DECIMAL(5,2)
            )
        `);

        await tenantConn.query(`
            CREATE TABLE IF NOT EXISTS cariler (
                id INT AUTO_INCREMENT PRIMARY KEY,
                unvan VARCHAR(255),
                vergi_no VARCHAR(50),
                telefon VARCHAR(20),
                email VARCHAR(100)
            )
        `);

        await tenantConn.end();
        await masterConn.end();

        // Başarılı olursa login sayfasına yönlendir
        res.redirect('/login');
    } catch (err) {
        if (masterConn && masterConn.connection && masterConn.connection.inTransaction) {
            await masterConn.rollback();
        }
        if (masterConn) await masterConn.end();
        res.status(500).send('❌ Hata: ' + err.message);
    }
});

// Login endpoint
app.post('/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.render('login', { error: 'Lütfen tüm alanları doldurun.' });
    }

    try {
        const conn = await mysql.createConnection({
            host,
            user: masterDbUser,
            password: masterDbPass,
            database: masterDbName
        });

        // Email ve company bilgilerini birlikte çek
        const [users] = await conn.execute(`
            SELECT u.*, c.name as company_name, c.db_name 
            FROM users u 
            JOIN companies c ON u.company_id = c.id 
            WHERE u.email = ?`,
            [email]
        );

        if (users.length === 0) {
            await conn.end();
            return res.render('login', { error: 'E-posta bulunamadı!' });
        }

        const user = users[0];
        const hashedPassword = crypto.createHash('sha256').update(password).digest('hex');

        if (hashedPassword !== user.password_hash) {
            await conn.end();
            return res.render('login', { error: 'Hatalı şifre!' });
        }

        // Session'a kullanıcı bilgilerini kaydet
        req.session.user = {
            id: user.id,
            email: user.email,
            role: user.role,
            companyId: user.company_id,
            companyName: user.company_name,
            dbName: user.db_name
        };

        await conn.end();
        res.redirect('/anasayfa');

    } catch (error) {
        console.error(error);
        res.render('login', { error: 'Bir hata oluştu!' });
    }
});

app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});













<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/cariekstre.css">
    <link href="/css/dashboard.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body>
<%- include('../sidebar') %>
<div class="main-content">
    <div class="ekstre-header">
        <div class="ekstre-filter-row">
            <div class="ekstre-filter-group">
                <label>Hesap</label>
                <select><option>...</option></select>
            </div>
            <div class="ekstre-filter-group">
                <label>Tarih Aralığı</label>
                <input type="date" value="2024-01-01">
                <span class="ekstre-date-sep">-</span>
                <input type="date" value="2025-12-31">
            </div>
            <button class="ekstre-btn ekstre-btn-primary"><i class="fas fa-bolt"></i> Raporu Hazırla</button>
        </div>
        <div class="ekstre-summary-row">
            <div class="ekstre-summary-box ekstre-borc">
                <i class="fas fa-money-bill-wave"></i>
                <div>
                    <div class="ekstre-summary-title">Toplam Borç</div>
                    <div class="ekstre-summary-value">0,00</div>
                </div>
            </div>
            <div class="ekstre-summary-box ekstre-alacak">
                <i class="fas fa-money-bill-wave"></i>
                <div>
                    <div class="ekstre-summary-title">Toplam Alacak</div>
                    <div class="ekstre-summary-value">0,00</div>
                </div>
            </div>
            <div class="ekstre-summary-box ekstre-bakiye">
                <i class="fas fa-money-bill-wave"></i>
                <div>
                    <div class="ekstre-summary-title">Bakiye</div>
                    <div class="ekstre-summary-value">0,00</div>
                </div>
            </div>
        </div>
        <div class="ekstre-action-row">
            <button class="ekstre-btn ekstre-btn-pdf"><i class="fas fa-file-pdf"></i> PDF</button>
            <button class="ekstre-btn ekstre-btn-mail"><i class="fas fa-envelope"></i> Gönder</button>
        </div>
    </div>
    <div class="ekstre-table-wrap">
        <% if (hareketler && hareketler.length > 0) { %>
        <table class="ekstre-table">
            <thead>
                <tr>
                    <th>Fiş Tarihi</th>
                    <th>Fatura Fiş No</th>
                    <th>Stok Fiş No</th>
                    <th>Fiş Tipi</th>
                    <th>İşlem Detay Türü</th>
                    <th>Müşteri</th>
                    <th>Belge No</th>
                    <th>Borç</th>
                    <th>Alacak</th>
                    <th>Döviz Cinsi</th>
                    <th>Bakiye</th>
                    <th>Bakiye Türü</th>
                    <th>Döviz Kuru</th>
                    <th>Döviz Borç</th>
                    <th>Döviz Alacak</th>
                    <th>Döviz Bakiye</th>
                    <th>Açıklama</th>
                    <th>Vade Tarihi</th>
                    <th>Vade Gün</th>
                </tr>
            </thead>
            <tbody>
                <% hareketler.forEach(row => { %>
                <tr>
                    <td><%= row.fis_tarihi %></td>
                    <td><%= row.fatura_fis_no %></td>
                    <td><%= row.stok_fis_no %></td>
                    <td><%= row.fis_tipi %></td>
                    <td><%= row.islem_detay_turu %></td>
                    <td><%= row.musteri %></td>
                    <td><%= row.belge_no %></td>
                    <td class="borc"><%= row.borc %></td>
                    <td class="alacak"><%= row.alacak %></td>
                    <td><%= row.doviz_cinsi %></td>
                    <td><%= row.bakiye %></td>
                    <td><%= row.bakiye_turu %></td>
                    <td><%= row.doviz_kuru %></td>
                    <td><%= row.doviz_borc %></td>
                    <td><%= row.doviz_alacak %></td>
                    <td><%= row.doviz_bakiye %></td>
                    <td><%= row.aciklama %></td>
                    <td><%= row.vade_tarihi %></td>
                    <td><%= row.vade_gun %></td>
                </tr>
                <% }) %>
            </tbody>
        </table>
        <% } else { %>
        <div class="ekstre-empty">
            <i class="fas fa-info-circle"></i>
            <span>Seçtiğiniz tarih aralığında hesap hareketi bulunmuyor.</span>
        </div>
        <% } %>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/script.js"></script>
</body>
</html>


